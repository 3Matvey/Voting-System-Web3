// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Voting.Infrastructure.Data;

#nullable disable

namespace Voting.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Voting.Domain.Aggregates.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("BlockchainAddress")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VerificationLevel")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Voting.Domain.Aggregates.VotingSessionAggregate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid>("AdminUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid[]>("RegisteredUserIds")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<int>("RequiredVerificationLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid[]>("VotedUserIds")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<bool>("VotingActive")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("VotingSessions", (string)null);
                });

            modelBuilder.Entity("Voting.Domain.Aggregates.VotingSessionAggregate", b =>
                {
                    b.OwnsMany("Voting.Domain.Entities.Candidate", "Candidates", b1 =>
                        {
                            b1.Property<long>("SessionId")
                                .HasColumnType("bigint");

                            b1.Property<long>("Id")
                                .HasColumnType("bigint")
                                .HasColumnName("CandidateId");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.Property<long>("VoteCount")
                                .HasColumnType("bigint");

                            b1.HasKey("SessionId", "Id");

                            b1.ToTable("VotingSessionCandidates", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("SessionId");
                        });

                    b.Navigation("Candidates");
                });
#pragma warning restore 612, 618
        }
    }
}
